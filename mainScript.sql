/*
*CREACION DE TIPOS
*/

/*TIPO CURSO*/

/*Declaracion y cuerpo del tipo CURSO*/
create or replace TYPE CURSO_TYPE AS OBJECT(
    ID_CURSO NUMBER(4),
    DESCRIPCION VARCHAR2(60),
    NIVEL VARCHAR2(30),
    TURNO CHAR,
    CONSTRUCTOR FUNCTION CURSO_TYPE(ID_CURSO NUMBER, DESCRIPCION VARCHAR2, NIVEL VARCHAR2, TURNO CHAR) RETURN SELF AS RESULT,
    MEMBER PROCEDURE VER_CURSO
);

create or replace TYPE BODY CURSO_TYPE AS
    CONSTRUCTOR FUNCTION CURSO_TYPE(ID_CURSO NUMBER, DESCRIPCION VARCHAR2, NIVEL VARCHAR2, TURNO CHAR) RETURN SELF AS RESULT AS
    BEGIN
        SELF.ID_CURSO := ID_CURSO;
        SELF.DESCRIPCION := DESCRIPCION;
        SELF.NIVEL := NIVEL;
        SELF.TURNO := TURNO;
        RETURN;
    END;

    MEMBER FUNCTION VER_CURSO RETURN VARCHAR2 IS
    BEGIN
        RETURN 'ID CURSO: ' || ID_CURSO || '\nDESCRIPCION: ' || DESCRIPCION || '\nNIVEL: ' || NIVEL || '\nTURNO: ' || TURNO;
    END;
END;

/*TIPO ASIGNATURA*/

/*Declaracion y cuerpo del tipo ASIGNATURA*/
create or replace TYPE ASIGNATURA_TYPE AS OBJECT(
    COD_ASIG NUMBER(4),
    NOMBRE VARCHAR2(80),
    TIPO CHAR,
    MEMBER FUNCTION VER_ASIGNATURA RETURN VARCHAR2
);

create or replace TYPE BODY ASIGNATURA_TYPE AS

    MEMBER FUNCTION VER_ASIGNATURA RETURN VARCHAR2 IS
    BEGIN
        RETURN 'CODIGO ASIGNATURA: ' || COD_ASIG || '\nNOMBRE: ' || NOMBRE || '\nTIPO: ' || TIPO;
    END;
END;

/*TIPO NOTA*/

/*Declaracion del tipo EVALUACION*/
CREATE OR REPLACE TYPE EVALUACION_VARRAY AS VARRAY(5) OF NUMBER(4,2);

/*Declaracion y cuerpo del tipo NOTA*/
CREATE OR REPLACE TYPE NOTA_TYPE AS OBJECT(
    ASIG REF ASIGNATURA_TYPE,
    EVALUACION EVALUACION_VARRAY,
    MEMBER FUNCTION MEDIA_FINAL_JUNIO(COD_ASIG NUMBER) RETURN NUMBER
);

create or replace TYPE BODY NOTA_TYPE AS

    MEMBER FUNCTION MEDIA_FINAL_JUNIO RETURN NUMBER IS
    BEGIN
        RETURN (EVALUACION(1) + EVALUACION(2) + EVALUACION(3))/3;
    END;
END;


/*TIPO ALUMNO*/

/*Declaracion  del varray CONTACTO (contiene hasta dos telefonos)*/
CREATE OR REPLACE TYPE CONTACTO_VARRAY AS VARRAY(2) OF VARCHAR2(15);

/*Declaracion y cuerpo del tipo DOMICILIO (tipo con la info relativa a una vivienda)*/
create or replace TYPE DOMICILIO_TYPE AS OBJECT(
    DIRECCION VARCHAR2(50),
    POBLACION VARCHAR2(50),
    CODPOSTAL NUMBER(5),
    PROVINCIA VARCHAR2(40),
    MEMBER FUNCTION VER_DOMICILIO RETURN VARCHAR2
);

create or replace TYPE BODY DOMICILIO_TYPE AS

    MEMBER FUNCTION VER_DOMICILIO RETURN VARCHAR2 IS
    BEGIN
        RETURN 'DIRECCION: ' || DIRECCION || 'POBLACION: ' || POBLACION || 'COD. POSTAL: ' || CODPOSTAL || 'PROVINCIA: ' || PROVINCIA;
    END;
END;

/*Declaracion y cuerpo del tipo PERSONA (ALUMNO heredara de este tipo)*/
create or replace TYPE PERSONA_TYPE AS OBJECT(
    NOMBRE VARCHAR2(50),
    DOMICILIO DOMICILIO_TYPE,
    CONTACTO CONTACTO_VARRAY,
    FECHA_NAC DATE,
    MEMBER FUNCTION VER_DESCRIPCION RETURN VARCHAR2
)NOT FINAL;

create or replace TYPE BODY PERSONA_TYPE AS

    MEMBER FUNCTION VER_DESCRIPCION RETURN VARCHAR2 IS
    BEGIN
        RETURN 'NOMBRE: ' || NOMBRE || '\nDOMICILIO: ' || DOMICILIO.VER_DOMICILIO;
    END;
END;

/*Declaracion del tipo TABLA_ANID_NOTA*/
CREATE TYPE TABLA_ANID_NOTA AS TABLE OF NOTA_TYPE;

/*Declaracion del tipo ALUMNO*/
create or replace TYPE ALUMNO_TYPE UNDER PERSONA_TYPE(
	DNI VARCHAR2(10),
    CURSO REF CURSO_TYPE,
    NOTA TABLA_ANID_NOTA,
    OVERRIDING MEMBER FUNCTION VER_DESCRIPCION RETURN VARCHAR2
);

create or replace TYPE BODY ALUMNO_TYPE AS

    OVERRIDING MEMBER FUNCTION VER_DESCRIPCION RETURN VARCHAR2 IS
     
        cadena VARCHAR2(500);
        evaluacion VARCHAR2(20);
        CURSOR cursor_1 IS SELECT * FROM TABLE(NOTA);
        cont NUMBER := 1;
        nombre_asignatura VARCHAR2(200);
        ref_asignatura REF ASIGNATURA_TYPE;
            
    BEGIN
        cadena := 'NOMBRE: ' || NOMBRE || '\nDNI: '|| DNI || '\nDOMICILIO: ' || DOMICILIO.VER_DOMICILIO || '\nNOTAS: ';  
        FOR i IN cursor_1 LOOP
        SELECT  NOMBRE INTO nombre_asignatura FROM ASIGNATURA_TABLA A WHERE i.asig = REF(A); 
        cadena := CONCAT(cadena, '\n\n' || UPPER(nombre_asignatura) || ':');
            FOR j IN 1.. i.evaluacion.count LOOP
                CASE j
                    WHEN 1 THEN evaluacion := 'Primera';
                    WHEN 2 THEN evaluacion := 'Segunda';
                    WHEN 3 THEN evaluacion := 'Tercera';
                    WHEN 4 THEN evaluacion := 'Final';
                    ELSE evaluacion := 'Septiembre';
                END CASE;     
               cadena := CONCAT(cadena, '\n\t' || evaluacion || ': ' || i.evaluacion(j));
               cont := cont + 1;
            END LOOP;
            cont := 1;
        END LOOP;
        RETURN cadena;
    END;
END;


/*
*CREACION DE TABLAS DE OBJETOS
*/

/*TABLA CURSO*/
CREATE TABLE CURSO_TABLA OF CURSO_TYPE(
    ID_CURSO NOT NULL PRIMARY KEY,
    TURNO DEFAULT 'm'
);

/*TABLA ALUMNO*/
CREATE TABLE ALUMNO_TABLA OF ALUMNO_TYPE(
    DNI PRIMARY KEY
)NESTED TABLE NOTA STORE AS NOTA_ANIDADA;

/*TABLA ASIGNATURA*/
CREATE TABLE ASIGNATURA_TABLA OF ASIGNATURA_TYPE(
    COD_ASIG NOT NULL PRIMARY KEY,
    TIPO DEFAULT 'f'
);


